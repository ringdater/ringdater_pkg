chron <- chron[chron$year <= dates[2],]
sample<- chron[chron$year >= dates[1],]
sample<- sample[sample$year <= dates[2],]
growth <- sample[,2]
noise <- rnorm(n = nrow(sample), mean = 0, sd = 1)
running <- TRUE
while (running){
growth <-  growth + (noise * sf)
tmp <- data.frame(growth, chron[,2])
test <- cor(tmp[,1], tmp[,2])
if ((test > (r_val - tollerance)) && (test < (r_val + tollerance))){
running <- FALSE
}
}
### add errors ###
if (errors > 0){
for (i in length(errors)){
err_index <- as.integer(runif(n = errors, min = 1, max = length(growth)))
#set what type of error it will be: assume even chance of missing or addin rings
err_type <-runif(1, min = 0, max = 1)
# err_type > 0.5 = extra ring
# err_type < 0.5 = missing ring
### add extra ring by splitting one in two
if (err_type > 0.5){
print("added extra ring")
split1 <- runif(n = 1, min = 0.2, max = 0.8)
split2 <- 1- split1
split_year <- c((growth[err_index]*split1), (growth[err_index]*split2))
growth <- c(growth[1:(err_index-1)], split_year, growth[(err_index+1): length(growth)])
na_ser <- NA
tmp_chron <- c(chron[,2], na_ser)
tmp_years <- min(chron$year):(max(chron$year) + errors)
output <- data.frame(year = tmp_years,
chrono = tmp_chron,
growth = growth)
} else { # combine two rings to simulate missing a ring in measuring
print("added missing ring")
combined_year <- growth[err_index] +growth[(err_index+1)]
growth <- c(growth[1:(err_index-1)], combined_year, growth[(err_index+2): length(growth)], NA)
output <- data.frame(year = chron[,1],
chrono = chron[,2],
growth = growth)
}
}
} else {
output <- data.frame(year = chron[,1],
chrono = chron[,2],
growth = growth)
}
if (show_plot){
print(ggplot()+
geom_line(data = output, aes(x= year, y = chrono), col = "blue", na.rm = TRUE)+
geom_line(data = output, aes(x= year, y = growth), col = "black", na.rm = TRUE)+
theme_classic())
}
return(output)
}
for (i in 1:10){
test  <- generate_sample(chron = chrono,
dates = c(1900, 2000),
r_val = 0.95,
tollerance = 0.01,
errors = 0,
show_plot = FALSE)
}
generate_sample <- function(chron, dates, r_val, tollerance = 0.05, errors, sf = 0.01, show_plot = TRUE){
chron <- chron[chron$year >= dates[1],]
chron <- chron[chron$year <= dates[2],]
sample<- chron[chron$year >= dates[1],]
sample<- sample[sample$year <= dates[2],]
growth <- sample[,2]
noise <- rnorm(n = nrow(sample), mean = 0, sd = 1)
running <- TRUE
while (running){
growth <-  growth + (noise * sf)
tmp <- data.frame(growth, chron[,2])
test <- cor(tmp[,1], tmp[,2])
if ((test > (r_val - tollerance)) && (test < (r_val + tollerance))){
running <- FALSE
}
}
output <- data.frame(year = chron[,1],
chrono = chron[,2],
growth = growth)
### add errors ###
if (errors > 0){
for (i in length(errors)){
growth <- output$growth
chron <- data.frame(year = output$year,
chrono = output$chrono)
err_index <- as.integer(runif(n = errors, min = 1, max = length(growth)))
#set what type of error it will be: assume even chance of missing or addin rings
err_type <-runif(1, min = 0, max = 1)
# err_type > 0.5 = extra ring
# err_type < 0.5 = missing ring
### add extra ring by splitting one in two
if (err_type > 0.5){
print("added extra ring")
split1 <- runif(n = 1, min = 0.2, max = 0.8)
split2 <- 1- split1
split_year <- c((growth[err_index]*split1), (growth[err_index]*split2))
growth <- c(growth[1:(err_index-1)], split_year, growth[(err_index+1): length(growth)])
na_ser <- NA
tmp_chron <- c(chron[,2], na_ser)
tmp_years <- min(chron$year):(max(chron$year) + errors)
output <- data.frame(year = tmp_years,
chrono = tmp_chron,
growth = growth)
} else { # combine two rings to simulate missing a ring in measuring
print("added missing ring")
combined_year <- growth[err_index] +growth[(err_index+1)]
growth <- c(growth[1:(err_index-1)], combined_year, growth[(err_index+2): length(growth)], NA)
output <- data.frame(year = chron[,1],
chrono = chron[,2],
growth = growth)
}
}
} else {
output <- data.frame(year = chron[,1],
chrono = chron[,2],
growth = growth)
}
if (show_plot){
print(ggplot()+
geom_line(data = output, aes(x= year, y = chrono), col = "blue", na.rm = TRUE)+
geom_line(data = output, aes(x= year, y = growth), col = "black", na.rm = TRUE)+
theme_classic())
}
return(output)
}
test  <- generate_sample(chron = chrono,
dates = c(1900, 2000),
r_val = 0.95,
tollerance = 0.01,
errors = 20,
show_plot = TRUE)
test  <- generate_sample(chron = chrono,
dates = c(1900, 2000),
r_val = 0.95,
tollerance = 0.01,
errors = 2,
show_plot = TRUE)
generate_sample <- function(chron, dates, r_val, tollerance = 0.05, errors, sf = 0.01, show_plot = TRUE){
chron <- chron[chron$year >= dates[1],]
chron <- chron[chron$year <= dates[2],]
sample<- chron[chron$year >= dates[1],]
sample<- sample[sample$year <= dates[2],]
growth <- sample[,2]
noise <- rnorm(n = nrow(sample), mean = 0, sd = 1)
running <- TRUE
while (running){
growth <-  growth + (noise * sf)
tmp <- data.frame(growth, chron[,2])
test <- cor(tmp[,1], tmp[,2])
if ((test > (r_val - tollerance)) && (test < (r_val + tollerance))){
running <- FALSE
}
}
### add errors ###
if (errors > 0){
err_index <- as.integer(runif(n = errors, min = 1, max = length(growth)))
#set what type of error it will be: assume even chance of missing or addin rings
err_type <-runif(1, min = 0, max = 1)
# err_type > 0.5 = extra ring
# err_type < 0.5 = missing ring
### add extra ring by splitting one in two
if (err_type > 0.5){
print("added extra ring")
split1 <- runif(n = 1, min = 0.2, max = 0.8)
split2 <- 1- split1
split_year <- c((growth[err_index]*split1), (growth[err_index]*split2))
growth <- c(growth[1:(err_index-1)], split_year, growth[(err_index+1): length(growth)])
na_ser <- NA
tmp_chron <- c(chron[,2], na_ser)
tmp_years <- min(chron$year):(max(chron$year) + errors)
output <- data.frame(year = tmp_years,
chrono = tmp_chron,
growth = growth)
} else { # combine two rings to simulate missing a ring in measuring
print("added missing ring")
combined_year <- growth[err_index] +growth[(err_index+1)]
growth <- c(growth[1:(err_index-1)], combined_year, growth[(err_index+2): length(growth)], NA)
output <- data.frame(year = chron[,1],
chrono = chron[,2],
growth = growth)
}
} else {
output <- data.frame(year = chron[,1],
chrono = chron[,2],
growth = growth)
}
if (show_plot){
print(ggplot()+
geom_line(data = output, aes(x= year, y = chrono), col = "blue", na.rm = TRUE)+
geom_line(data = output, aes(x= year, y = growth), col = "black", na.rm = TRUE)+
theme_classic())
}
return(output)
}
test  <- generate_sample(chron = chrono,
dates = c(1900, 2000),
r_val = 0.95,
tollerance = 0.01,
errors = 2,
show_plot = TRUE)
add_noise <- function(growth, r_val, tollerance = 0.05, sf = 0.01){
noise <- rnorm(n = nrow(sample), mean = 0, sd = 1)
running <- TRUE
while (running){
growth <-  growth + (noise * sf)
tmp <- data.frame(growth, chron[,2])
test <- cor(tmp[,1], tmp[,2])
if ((test > (r_val - tollerance)) && (test < (r_val + tollerance))){
running <- FALSE
}
}
return(growth)
}
add_ring <- function(growth){
# where to add the ring
err_index <- as.integer(runif(n = errors, min = 1, max = length(growth)))
# what percentage to split the ring into
split1 <- runif(n = 1, min = 0.2, max = 0.8)
split2 <- 1- split1
split_year <- c((growth[err_index]*split1), (growth[err_index]*split2))
growth <- c(growth[1:(err_index-1)], split_year, growth[(err_index+1): length(growth)])
return(growth)
}
### Code to simulate the generation of a 1000 year chronology
library(VGAM)
library(ggplot2)
setwd("F:/OneDrive - University of Exeter/SEACHANGE/predicting chronology development")
longevity_mean <- 100
longevity_sd <- 50
inital_r_mean <- 0.2
inital_r_sd <- 0.2
errors <- 2 # per 100 years
target_eps <- 0.9
target_sample_depth <- 12
required_overalp <- 50
chrono <- read.csv("iceland_NE_chronology.csv", header = TRUE)
plot(chrono, type = "l")
generate_skewed_series <- function(skewness, mean, sd, n) {
# Calculate the parameters for the log-normal distribution
mu <- log(mean^2 / sqrt(sd^2 + mean^2))
sigma <- sqrt(log(1 + (sd^2 / mean^2)))
# Generate random numbers from the log-normal distribution
skewed_series <- rlnorm(n, meanlog = mu, sdlog = sigma)
# Adjust skewness if needed
if(skewness != 0) {
skewed_series <- (skewed_series - mean(skewed_series)) / sd(skewed_series)
skewed_series <- skewed_series * skewness
}
# Adjust mean and standard deviation
scaled_skewed_series <- (skewed_series - mean(skewed_series)) / sd(skewed_series)
scaled_skewed_series <- scaled_skewed_series * sd + mean
# Return the skewed series
return(scaled_skewed_series)
}
add_noise <- function(growth, r_val, tollerance = 0.05, sf = 0.01){
noise <- rnorm(n = nrow(sample), mean = 0, sd = 1)
running <- TRUE
while (running){
growth <-  growth + (noise * sf)
tmp <- data.frame(growth, chron[,2])
test <- cor(tmp[,1], tmp[,2])
if ((test > (r_val - tollerance)) && (test < (r_val + tollerance))){
running <- FALSE
}
}
return(growth)
}
add_ring <- function(growth){
# where to add the ring
err_index <- as.integer(runif(n = errors, min = 1, max = length(growth)))
# what percentage to split the ring into
split1 <- runif(n = 1, min = 0.2, max = 0.8)
split2 <- 1- split1
split_year <- c((growth[err_index]*split1), (growth[err_index]*split2))
growth <- c(growth[1:(err_index-1)], split_year, growth[(err_index+1): length(growth)])
return(growth)
}
sample <- chrono[chrono$year >= 1900,]
sample <- add_noise(sample)
add_noise <- function(growth, r_val, tollerance = 0.05, sf = 0.01){
chrono <- growth # store the original data as chronology
noise <- rnorm(n = nrow(sample), mean = 0, sd = 1)
running <- TRUE
while (running){
growth <-  growth + (noise * sf)
tmp <- data.frame(growth, chrono)
test <- cor(tmp[,1], tmp[,2])
if ((test > (r_val - tollerance)) && (test < (r_val + tollerance))){
running <- FALSE
}
}
return(growth)
}
sample <- add_noise(sample)
sample <- add_noise(sample, r_val = 0.8, tollerance = 0.01)
err_added <- add_ring(sample)
add_ring <- function(growth){
# where to add the ring
err_index <- as.integer(runif(n = 1, min = 1, max = length(growth)))
# what percentage to split the ring into
split1 <- runif(n = 1, min = 0.2, max = 0.8)
split2 <- 1 - split1
split_year <- c((growth[err_index]*split1), (growth[err_index]*split2))
growth <- c(growth[1:(err_index-1)], split_year, growth[(err_index+1): length(growth)])
return(growth)
}
err_added <- add_ring(sample)
length(sample)
sample
sample <- chrono[chrono$year >= 1900,2]
sample <- add_noise(sample, r_val = 0.8, tollerance = 0.01)
add_noise <- function(growth, r_val, tollerance = 0.05, sf = 0.01){
chrono <- growth # store the original data as chronology
noise <- rnorm(n = length(sample), mean = 0, sd = 1)
running <- TRUE
while (running){
growth <-  growth + (noise * sf)
tmp <- data.frame(growth, chrono)
test <- cor(tmp[,1], tmp[,2])
if ((test > (r_val - tollerance)) && (test < (r_val + tollerance))){
running <- FALSE
}
}
return(growth)
}
sample <- chrono[chrono$year >= 1900,2]
sample <- add_noise(sample, r_val = 0.8, tollerance = 0.01)
length(sample)
err_added <- add_ring(sample)
length(err_added)
# growth is a vector containing growth ring widths
add_ring <- function(growth, err_index){
# what percentage to split the ring into
split1 <- runif(n = 1, min = 0.2, max = 0.8)
split2 <- 1 - split1
split_year <- c((growth[err_index]*split1), (growth[err_index]*split2))
growth <- c(growth[1:(err_index-1)], split_year, growth[(err_index+1): length(growth)])
return(growth)
}
# growth is a vector containing growth ring widths
missing_ring <- function(growth, err_index){
combined_year <- growth[err_index] + growth[(err_index+1)]
growth <- c(growth[1:(err_index-1)], combined_year, growth[(err_index+2): length(growth)], NA)
return(growth)
}
generate_sample <- function(chronology, dates = c(1900,2000), r_Val = 0.5, errors = 3){
growth <- chronology[chronology$year >= dates[1],]
growth <- growth[growth$year <= dates[2],]
growth <- growth[,2]
if (errors > 0){
error_index <- as.integer(runif(n = errors, min = 0, nax = length(growth)))
for (i in 1:errors){
type <- runif(n = errors, min = 0, nax = 1)
if (type > 0.5){
print("ring added")
growth <- add_ring(growth = growth, err_index = error_index[i])
} else if (type < 0.5){
print("ring missed")
growth <- missing_ring(growth = growth, err_index = error_index[i])
}
}
}
return(growth)
}
test <- generate_sample(chronology = chrono, dates = c(1850,2003), r_Val = 0.8)
runif(n = errors, min = 0, nax = length(growth))
generate_sample <- function(chronology, dates = c(1900,2000), r_Val = 0.5, errors = 3){
growth <- chronology[chronology$year >= dates[1],]
growth <- growth[growth$year <= dates[2],]
growth <- growth[,2]
print(growth)
if (errors > 0){
error_index <- as.integer(runif(n = errors, min = 0, nax = length(growth)))
for (i in 1:errors){
type <- runif(n = errors, min = 0, nax = 1)
if (type > 0.5){
print("ring added")
growth <- add_ring(growth = growth, err_index = error_index[i])
} else if (type < 0.5){
print("ring missed")
growth <- missing_ring(growth = growth, err_index = error_index[i])
}
}
}
return(growth)
}
test <- generate_sample(chronology = chrono,
dates = c(1850,2003),
r_Val = 0.8)
generate_sample <- function(chronology, dates = c(1900,2000), r_Val = 0.5, errors = 3){
growth <- chronology[chronology$year >= dates[1],]
growth <- growth[growth$year <= dates[2],]
growth <- growth[,2]
if (errors > 0){
error_index <- runif(n = errors, min = 0, nax = length(growth))
print(error_index)
for (i in 1:errors){
type <- runif(n = errors, min = 0, nax = 1)
if (type > 0.5){
print("ring added")
growth <- add_ring(growth = growth, err_index = as.integer(error_index[i]))
} else if (type < 0.5){
print("ring missed")
growth <- missing_ring(growth = growth, err_index = as.integer(error_index[i]))
}
}
}
return(growth)
}
test <- generate_sample(chronology = chrono,
dates = c(1850,2003),
r_Val = 0.8)
generate_sample <- function(chronology, dates = c(1900,2000), r_Val = 0.5, errors = 3){
growth <- chronology[chronology$year >= dates[1],]
growth <- growth[growth$year <= dates[2],]
growth <- growth[,2]
if (errors > 0){
error_index <- runif(n = errors, min = 0, max = length(growth))
print(error_index)
for (i in 1:errors){
type <- runif(n = errors, min = 0, nax = 1)
if (type > 0.5){
print("ring added")
growth <- add_ring(growth = growth, err_index = as.integer(error_index[i]))
} else if (type < 0.5){
print("ring missed")
growth <- missing_ring(growth = growth, err_index = as.integer(error_index[i]))
}
}
}
return(growth)
}
test <- generate_sample(chronology = chrono,
dates = c(1850,2003),
r_Val = 0.8)
generate_sample <- function(chronology, dates = c(1900,2000), r_Val = 0.5, errors = 3){
growth <- chronology[chronology$year >= dates[1],]
growth <- growth[growth$year <= dates[2],]
growth <- growth[,2]
if (errors > 0){
error_index <- runif(n = errors, min = 0, max = length(growth))
print(error_index)
for (i in 1:errors){
type <- runif(n = errors, min = 0, max = 1)
if (type > 0.5){
print("ring added")
growth <- add_ring(growth = growth, err_index = as.integer(error_index[i]))
} else if (type < 0.5){
print("ring missed")
growth <- missing_ring(growth = growth, err_index = as.integer(error_index[i]))
}
}
}
return(growth)
}
test <- generate_sample(chronology = chrono,
dates = c(1850,2003),
r_Val = 0.8)
generate_sample <- function(chronology, dates = c(1900,2000), r_Val = 0.5, errors = 3){
growth <- chronology[chronology$year >= dates[1],]
growth <- growth[growth$year <= dates[2],]
growth <- growth[,2]
if (errors > 0){
error_index <- runif(n = errors, min = 0, max = length(growth))
print(error_index)
for (i in 1:errors){
err_type <- runif(n = errors, min = 0, max = 1)
if (err_type > 0.5){
print("ring added")
growth <- add_ring(growth = growth, err_index = as.integer(error_index[i]))
} else if (err_type < 0.5){
print("ring missed")
growth <- missing_ring(growth = growth, err_index = as.integer(error_index[i]))
}
}
}
return(growth)
}
test <- generate_sample(chronology = chrono,
dates = c(1850,2003),
r_Val = 0.8)
generate_sample <- function(chronology, dates = c(1900,2000), r_Val = 0.5, errors = 3){
growth <- chronology[chronology$year >= dates[1],]
growth <- growth[growth$year <= dates[2],]
growth <- growth[,2]
if (errors > 0){
error_index <- runif(n = errors, min = 0, max = length(growth))
for (i in 1:errors){
err_type <- runif(n = 1, min = 0, max = 1)
if (err_type > 0.5){
print("ring added")
growth <- add_ring(growth = growth, err_index = as.integer(error_index[i]))
} else if (err_type < 0.5){
print("ring missed")
growth <- missing_ring(growth = growth, err_index = as.integer(error_index[i]))
}
}
}
return(growth)
}
test <- generate_sample(chronology = chrono,
dates = c(1850,2003),
r_Val = 0.8)
test <- generate_sample(chronology = chrono,
dates = c(1850,2003),
r_Val = 0.8,
errors = 0)
